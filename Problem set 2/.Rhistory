class_pred <- predict(cvfit, x_train, s = lambda_min, type = "class")
cvfit <- cv.glmnet(x_train, y_train, family = 'binomial')
library(glmnet)
library(verification)
library(caret)
library(glmnet)
##question 3
train <- read.csv("/Users/carterhardy/Downloads/mull2.csv")
test <- read.csv("/Users/carterhardy/Downloads/newvalid.csv")
library(glmnet)
library(verification)
library(caret)
#drop varaibles
drop_cols <- c('LABEGRD_ID', 'aspd', 'UTMX', 'UTMY', 'VETH')
drop_cols_idx <- which(names(train) %in% drop_cols)
drop_cols_idx_test <- which(names(test) %in% drop_cols)
x_train <- as.matrix(train[-drop_cols_idx])
y_train <- as.matrix(train["VETH"])
cvfit <- cv.glmnet(x_train, y_train, family = 'binomial')
plot(cvfit)
lambda_min <- cvfit$lambda.min
lambda_1se <- cvfit$lambda.1se
#make accuracy table
class_pred <- predict(cvfit, x_train, s = lambda_min, type = "class")
#make accuracy table
class_pred <- predict(cvfit, x_train, s = lambda_min, type = "class")
table(y_train, class_pred)
#make accuracy table
class_pred <- predict(cvfit, x_train, s = lambda_min, type = "class")
#make accuracy table
class_pred <- as.vector(predict(cvfit, x_train, s = lambda_min, type = "class"))
table(y_train, class_pred)
class.sum(y_train, predict(cvfit, x_train, s = lambda_min, type = "class"))
#make accuracy table
class_pred <- as.integer(predict(cvfit, x_train, s = lambda_min, type = "class"))
table(y_train, class_pred)
class.sum(y_train, predict(cvfit, x_train, s = lambda_min, type = "class"))
class.sum(y_train, class_pred)
x_test <- as.matrix(test[-drop_cols_idx_test])
y_test <- as.matrix(test["VETH"])
class_pred2 <- as.integer(predict(cvfit, x_test, s = lambda_min, type = "class"))
table(y_test, class_pred2)
class.sum(y_test, class_pred2)
train <- read.csv("/Users/carterhardy/Downloads/mull2.csv")
test <- read.csv("/Users/carterhardy/Downloads/newvalid.csv")
library(glmnet)
library(verification)
library(caret)
#drop varaibles
drop_cols <- c('LABEGRD_ID', 'aspd', 'UTMX', 'UTMY', 'VETH')
drop_cols_idx <- which(names(train) %in% drop_cols)
drop_cols_idx_test <- which(names(test) %in% drop_cols)
x_train <- as.matrix(train[-drop_cols_idx])
y_train <- as.matrix(train["VETH"])
cvfit <- cv.glmnet(x_train, y_train, family = 'binomial')
plot(cvfit)
lambda_min <- cvfit$lambda.min
lambda_1se <- cvfit$lambda.1se
#make accuracy table
class_pred <- as.integer(predict(cvfit, x_train, s = lambda_min, type = "class"))
table(y_train, class_pred)
class.sum(y_train, class_pred)
kappa=function(x){
n=sum(x)
pobs=(x[1,1]+x[2,2])/n
pexp=(sum(x[1,])*sum(x[,1])+sum(x[2,])*sum(x[,2]))/n^2
kappa=(pobs-pexp)/(1-pexp)
t1=0
t2=0
t3=0
pii=x/n
pidot=apply(pii,1,sum)
pdotj=apply(pii,2,sum)
for(i in 1:2){
t1 = t1 + pii[i,i]*((1-pexp) - (1-pobs)*(pidot[i]+pdotj[i]))^2
}
t2 = pii[1,2]*(pdotj[1]+pidot[2])^2 + pii[2,1]*(pdotj[2] +
pidot[1])^2
t3 = (pobs*pexp-2*pexp+pobs)^2
vhat = (t1 + t2*(1-pobs)^2 -t3)/(n*(1-pexp)^4)
se=sqrt(vhat)
return(c(kappa,se))
}
class.sum=function(truth,predicted){
xt=table(truth,round(predicted+0.000001))
pcc=round(100*sum(diag(xt))/sum(xt),2)
spec=round(100*xt[1,1]/sum(xt[1,]),2)
sens=round(100*xt[2,2]/sum(xt[2,]),2)
kap=round(kappa(xt)[1],4)
au=round(roc.area(truth,predicted)$A,4)
return(cbind(c("Percent Correctly Classified = ","Specificity =
","Sensitivity = ","Kappa =","AUC= "),c(pcc,spec,sens,kap,au)))
}
class.sum(y_test, class_pred2)
class.sum(y_train, class_pred)
x_test <- as.matrix(test[-drop_cols_idx_test])
y_test <- as.matrix(test["VETH"])
class_pred2 <- as.integer(predict(cvfit, x_test, s = lambda_min, type = "class"))
table(y_test, class_pred2)
class.sum(y_test, class_pred2)
class_pred2 <- as.integer(predict(cvfit, x_test, s = lambda_1se, type = "class"))
table(y_test, class_pred2)
class.sum(y_test, class_pred2)
class_pred2 <- as.integer(predict(cvfit, x_test, s = lambda_min, type = "class"))
class.sum(y_train, class_pred)
glass <- read.csv("/Users/carterhardy/Downloads/Glass.csv")
class(glass$GlassType)
library(randomForest)
set.seed(7)
rf <- randomForest(factor(GlassType) ~ ., importance = T, data = glass)
rf$confusion
sum(diag(rf$confusion)) / 214
varImpPlot(rf)
rf1 <- randomForest(factor(GlassType) ~ Magnesium + Refindex + Aluminum, importance = T, data = glass)
rf1$confusion
sum(diag(rf1$confusion)) / 214
rf2 <- randomForest(factor(GlassType) ~ Magnesium + Refindex + Aluminum + Calcium, importance = T, data = glass)
rf2$confusion
sum(diag(rf2$confusion)) / 214
rf3 <- randomForest(factor(GlassType) ~ Magnesium + Refindex + Aluminum + Barium + Calcium + Potassium + Sodium + Silicon, importance = T, data = glass)
rf3$confusion
sum(diag(rf3$confusion)) / 214
rf <- randomForest(factor(GlassType) ~ ., importance = T, data = glass)
rf$confusion
sum(diag(rf$confusion)) / 214
varImpPlot(rf)
sum(diag(rf1$confusion)) / 214
rf2 <- randomForest(factor(GlassType) ~ Magnesium + Refindex + Aluminum + Calcium, importance = T, data = glass)
rf2$confusion
sum(diag(rf2$confusion)) / 214
#random forests
library(randomForest)
mull.rf = randomForest(as.factor(VETH) ~ . , data = mull)
set.seed(7)
# setup
kappa = function(x) {
n = sum(x)
pobs = (x[1, 1] + x[2, 2]) / n
pexp = (sum(x[1, ]) * sum(x[, 1]) + sum(x[2, ]) * sum(x[, 2])) / n ^ 2
kappa = (pobs - pexp) / (1 - pexp)
t1 = 0
t2 = 0
t3 = 0
pii = x / n
pidot = apply(pii, 1, sum)
pdotj = apply(pii, 2, sum)
for (i in 1:2) {
t1 = t1 + pii[i, i] * ((1 - pexp) - (1 - pobs) * (pidot[i] + pdotj[i])) ^
2
}
t2 = pii[1, 2] * (pdotj[1] + pidot[2]) ^ 2 + pii[2, 1] * (pdotj[2] +
pidot[1]) ^ 2
t3 = (pobs * pexp - 2 * pexp + pobs) ^ 2
vhat = (t1 + t2 * (1 - pobs) ^ 2 - t3) / (n * (1 - pexp) ^ 4)
se = sqrt(vhat)
return(c(kappa, se))
}
class.sum = function(truth, predicted) {
xt = table(truth, round(predicted + 0.000001))
pcc = round(100 * sum(diag(xt)) / sum(xt), 2)
spec = round(100 * xt[1, 1] / sum(xt[1, ]), 2)
sens = round(100 * xt[2, 2] / sum(xt[2, ]), 2)
kap = round(kappa(xt)[1], 4)
au = round(roc.area(truth, predicted)$A, 4)
return(cbind(
c(
"Percent Correctly Classified = ",
"Specificity =
",
"Sensitivity = ",
"Kappa =",
"AUC= "
),
c(pcc, spec, sens, kap, au)
))
}
# data
mull = read.csv("~/school/stat5650/data/mull2.csv")
mull2 = read.csv("~/school/stat5650/data/newvalid.csv")
drop_cols <- c('LABEGRD_ID', 'aspd', 'UTMX', 'UTMY')
drop_cols_idx <- which(names(mull) %in% drop_cols)
mull <- mull[-drop_cols_idx]
drop_cols_idx <- which(names(mull2) %in% drop_cols)
mull2 <- mull2[-drop_cols_idx]
# data
mull = read.csv("/Users/carterhardy/Downloads/mull2.csv")
mull2 = read.csv("/Users/carterhardy/Downloads/newvalid.csv")
drop_cols <- c('LABEGRD_ID', 'aspd', 'UTMX', 'UTMY')
drop_cols_idx <- which(names(mull) %in% drop_cols)
mull <- mull[-drop_cols_idx]
drop_cols_idx <- which(names(mull2) %in% drop_cols)
mull2 <- mull2[-drop_cols_idx]
#random forests
library(randomForest)
mull.rf = randomForest(as.factor(VETH) ~ . , data = mull)
mull.rf$confusion
sum(diag(mull.rf$confusion)) / sum(mull.rf$confusion)
# rf model on test set
table(mull2$VETH, predict(mull.rf, mull2, type = "response"))
class.sum(mull2$VETH, predict(mull.rf, mull2, type = "prob")[, 2])
varImpPlot(mull.rf)
head(mull2$relhd)
head(mull2$tmina)
head(mull2$road_dist)
unique(mull2$relhd)
# initialize.R
print("Initializing the project!")
2+2
2+2
a = c(1,2,3,4,5,6)
?c
library(tidyverse)
library(tidyverse)
wd()
list.files()
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106")
library(tidyverse)
head(KG_Samples$Data.collections,2)
KG_Samples = read.table("igsr_samples.tsv",sep = "\t", header = T)
head(KG_Samples)
KG_Samples = read.table("igsr_samples.tsv",sep = "\t", header = T)
head(KG_Samples)
#### there is a column in this dataframe that is comma separated, we can split this column<br>
#### into 5 different sections named from A to E using the separate function from the tidyverse package<br>
```{r separate}
library(tidyverse)
head(KG_Samples$Data.collections,2)
KG_Samples = KG_Samples %>%
separate(Data.collections,c("A","B","C","D","E"),",")
data <- read.csv("diabetes.csv")
dia_data <- read.csv("diabetes.csv")
head(dia_data)
head(dia_data, n =5)
head(dia_data, n = 5)
#### 2. How many patients have diabetes?<br>
### Assuming outcome = 1 means the patient has diabetes
sum(dia_data$Outcome == 1)
diabetes_obs <- sum(dia_data$Outcome == 1)
sum(dia_data$Outcome == 1)
sum(dia_data$Outcome == 1)
diabetes_obs <- dia_data$Outcome == 1
diabetes_obs <- subset(dia_data, Outcome == 1)
sum(diabetes_obs$Age > 45)
no_dia_obs <- subset(dia_data, Outcome == 0)
summary_no_dia
no_dia_obs <- subset(dia_data, Outcome == 0)
summary_no_dia <- no_dia_obs %>%
summarize(mean = mean(Glucose), std_dev = sd(Glucose))
summary_no_dia
summary_no_dia <- no_dia_obs %>%
summarize(mean = mean(Glucose), var = var(Glucose))
summary_no_dia
dia_data = dia_data %>%
mutate(HighBpDiabetes = if_else(condition = Outcome == 1 & if_else(condition = BloodPressure > 100, true = 1, false = 2), false = 3))
dia_data = dia_data %>%
mutate(HighBpDiabetes = case_when(
Outcome == 1 & BloodPressure > 100 ~ 1,
Outcome == 1 & BloodPressure <= 100 ~ 2,
Outcome == 0  ~ 3
))
head(dia_data$HighBpDiabetes, n = 5)
head(dia_data$HighBpDiabetes, n = 5)
head(dia_data$HighBpDiabetes)
ggplot(data = diabetes_obs, mapping = aes(x = BMI))
?ggplot
ggplot(data = diabetes_obs)
library(ggplot2)
plot_diabetes <- ggplot(diabetes_obs, aes(x = BMI)) +
geom_density(fill = "red", alpha = 0.5) +
labs(
title = "BMI Distribution for Individuals with Diabetes",
x = "BMI",
y = "Density"
) +
theme_minimal()
plot_diabetes
plot_no_diabetes <- ggplot(no_dia_obs, aes(x = BMI)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(
title = "BMI Distribution for Individuals without Diabetes",
x = "BMI",
y = "Density"
) +
theme_minimal()
plot_no_diabetes
plot_diabetes
plot_no_diabetes
hist_diabetes <- ggplot(diabetes_obs, aes(x = BMI)) +
geom_histogram(fill = "red", color = "black", bins = 30, alpha = 0.7) +
labs(
title = "BMI Histogram for Individuals with Diabetes",
x = "BMI",
y = "Count"
) +
theme_minimal()
hist_no_diabetes <- ggplot(no_dia_obs, aes(x = BMI)) +
geom_histogram(fill = "blue", color = "black", bins = 30, alpha = 0.7) +
labs(
title = "BMI Histogram for Individuals without Diabetes",
x = "BMI",
y = "Count"
) +
theme_minimal()
hist_diabetes
hist_diabetes
hist_no_diabetes
hist_diabetes <- ggplot(diabetes_obs, aes(x = BMI)) +
geom_histogram(fill = "red", color = "black", bins = 30, alpha = 0.7) +
labs(
title = "BMI Histogram for Individuals with Diabetes",
x = "BMI",
y = "Count"
) +
theme_minimal()
hist_no_diabetes <- ggplot(no_dia_obs, aes(x = BMI)) +
geom_histogram(fill = "blue", color = "black", bins = 30, alpha = 0.7) +
labs(
title = "BMI Histogram for Individuals without Diabetes",
x = "BMI",
y = "Count"
) +
theme_minimal()
hist_diabetes
hist_no_diabetes
hist_diabetes
hist_diabetes
diabetes_obs <- diabetes_obs %>%
filter(BMI != 0)
no_dia_obs <- no_dia_obs %>%
filter(BMI != 0)
#After my first attempt I noticed BMI values of zero. This is first removing them
diabetes_obs <- diabetes_obs %>%
filter(BMI != 0)
no_dia_obs <- no_dia_obs %>%
filter(BMI != 0)
hist_diabetes <- ggplot(diabetes_obs, aes(x = BMI)) +
geom_histogram(fill = "red", color = "black", bins = 30, alpha = 0.7) +
labs(
title = "BMI Histogram for Individuals with Diabetes",
x = "BMI",
y = "Count"
) +
theme_minimal()
hist_no_diabetes <- ggplot(no_dia_obs, aes(x = BMI)) +
geom_histogram(fill = "blue", color = "black", bins = 30, alpha = 0.7) +
labs(
title = "BMI Histogram for Individuals without Diabetes",
x = "BMI",
y = "Count"
) +
theme_minimal()
hist_diabetes
hist_diabetes
hist_no_diabetes
hist_no_diabetes <- ggplot(no_dia_obs, aes(x = BMI)) +
geom_histogram(fill = "blue", color = "black", bins = 30, alpha = 0.7) +
labs(
title = "BMI Histogram for Individuals without Diabetes",
x = "BMI",
y = "Count"
) +
theme_minimal()
hist_diabetes
hist_no_diabetes
knitr::opts_chunk$set(echo = TRUE)
any(is.na(dia_data))
any(dia_data$Glucose == 0)
any(dia_data$Glucose == 0  & dia_data$Outcome == 1)
any(dia_data$Glucose == 0  & dia_data$Outcome == 0)
clean_glucose <- subset(no_dia_obs, Glucose != 0)
clean_glucose <- subset(no_dia_obs, Glucose != 0)
clean_summary_no_dia <- clean_glucose %>%
clean_summarize(mean = mean(Glucose), var = var(Glucose))
clean_summary_no_dia
clean_summary_no_dia <- clean_glucose %>%
clean_summarize(mean = mean(Glucose), var = var(Glucose))
clean_summary_no_dia <- clean_glucose %>%
clean_summarize(mean = mean(Glucose), var = var(Glucose))
clean_summary_no_dia <- clean_glucose %>%
summarize(mean = mean(Glucose), var = var(Glucose))
clean_glucose <- subset(no_dia_obs, Glucose != 0)
clean_summary_no_dia <- clean_glucose %>%
summarize(mean_gl = mean(Glucose), var_gl = var(Glucose))
library(tidyverse)
clean_summary_no_dia <- clean_glucose %>%
summarize(mean_gl = mean(Glucose), var_gl = var(Glucose))
clean_summary_no_dia
dia_data$Glucose > 200
any(dia_data$Glucose > 200)
clean_glucose <- subset(no_dia_obs, Glucose != 0)
clean_summary_no_dia <- clean_glucose %>%
summarize(mean_gl = mean(Glucose), var_gl = var(Glucose))
clean_summary_no_dia
knitr::opts_chunk$set(echo = TRUE)
#setwd("type/here/the/address/")
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106")
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106")
list.files()
KG_Samples = read.table("igsr_samples.tsv",sep = "\t", header = T)
head(KG_Samples)
library(tidyverse)
head(KG_Samples$Data.collections,2)
KG_Samples = KG_Samples %>%
separate(Data.collections,c("A","B","C","D","E"),",")
nrow(KG_Samples) ##2513
table(KG_Samples$Sex)
KG_Samples %>% group_by(Sex) %>% tally()
table(KG_Samples$Population.code,KG_Samples$Sex)
KG_Samples %>% filter(Population.code =="GBR") %>% group_by(Sex) %>% tally()
sample(c(0:100),1)
KG_Samples$Age = sample(c(0:100),size = nrow(KG_Samples), replace = TRUE)
head(KG_Samples,2)
KG_Samples = KG_Samples[,c(1,2,14,3:8)]
head(KG_Samples,2)
colnames(KG_Samples)
KG_Samples = subset(KG_Samples, select=-c(Biosample.ID))
colnames(KG_Samples)
summary_Age <- KG_Samples %>%
summarize(mean = mean(Age), std_dev = sd(Age))
summary_Age
summary_sex_Age <- KG_Samples %>%
group_by(Sex) %>%
summarize(mean = mean(Age, na.rm = TRUE),
std_dev = sd(Age, na.rm = TRUE))
summary_sex_Age
KG_Samples %>%
group_by(Population.name) %>%
summarize(count = n()) %>%
arrange(desc(count))
KG_Samples <- KG_Samples %>%
mutate(Age_Months = Age * 52)
ggplot(data = KG_Samples, mapping = aes(x = Age)) +
geom_histogram(color = "white", bins = 25)+
theme_classic()
KG_Samples = KG_Samples %>%
mutate(Age_EUR = if_else(condition = Age <50 & Superpopulation.code=="EUR",true = 1,false = 0))
head(KG_Samples,2)
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106")
dia_data <- read.csv("diabetes.csv")
head(dia_data, n = 5)
any(dia_data$Glucose == 0  & dia_data$Outcome == 0)
sum(dia_data$Outcome == 1)
diabetes_obs <- subset(dia_data, Outcome == 1)
sum(diabetes_obs$Age > 45)
no_dia_obs <- subset(dia_data, Outcome == 0)
summary_no_dia <- no_dia_obs %>%
summarize(mean = mean(Glucose), var = var(Glucose))
summary_no_dia
clean_glucose <- subset(no_dia_obs, Glucose != 0)
clean_summary_no_dia <- clean_glucose %>%
summarize(mean_gl = mean(Glucose), var_gl = var(Glucose))
clean_summary_no_dia
#any(dia_data$Glucose > 200) this returned False
dia_data = dia_data %>%
mutate(HighBpDiabetes = case_when(
Outcome == 1 & BloodPressure > 100 ~ 1,
Outcome == 1 & BloodPressure <= 100 ~ 2,
Outcome == 0  ~ 3
))
head(dia_data$HighBpDiabetes)
diabetes_obs <- diabetes_obs %>%
filter(BMI != 0)
no_dia_obs <- no_dia_obs %>%
filter(BMI != 0)
hist_diabetes <- ggplot(diabetes_obs, aes(x = BMI)) +
geom_histogram(fill = "red", color = "black", bins = 30, alpha = 0.7) +
labs(
title = "BMI Histogram for Individuals with Diabetes",
x = "BMI",
y = "Count"
) +
theme_minimal()
hist_no_diabetes <- ggplot(no_dia_obs, aes(x = BMI)) +
geom_histogram(fill = "blue", color = "black", bins = 30, alpha = 0.7) +
labs(
title = "BMI Histogram for Individuals without Diabetes",
x = "BMI",
y = "Count"
) +
theme_minimal()
hist_diabetes
hist_no_diabetes
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106")
list.files()
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106/Problem set 2")
list.files()
#setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106/Problem set 2")
#list.files()
# For space or tab-separated files
data <- read.table("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106/Problem set 2/birthwt.txt", header = TRUE, sep = "\t")
#setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106/Problem set 2")
#list.files()
# For space or tab-separated files
birth <- read.table("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106/Problem set 2/birthwt.txt", header = TRUE, sep = "\t")
View(birth)
#setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106/Problem set 2")
#list.files()
# For space or tab-separated files
birth <- read.table("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106/Problem set 2/birthwt.txt", header = TRUE, sep = " ")
View(birth)
birth$age > 30
filtered_birth = birth[birth$age > 30, ]
birth <- read.table("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106/Problem set 2/birthwt.txt", header = TRUE, sep = " ")
### A. How many observations are in the dataset?
#### I can see when I load in the data that there are 189 observations
### B. Examine each column
### C. How many individuals older than 30 smoke?
```{r}
filtered_birth = birth[birth$age > 30, ]
sum(filtered_birth$smoke == 1)
