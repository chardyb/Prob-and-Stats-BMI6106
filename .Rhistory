getwd()
setwd(/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106)
setwd(Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106)
setwd(/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106)
setwd('/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106')
getwd()
knitr::opts_chunk$set(echo = TRUE)
#setwd("type/here/the/address/")
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106")
#### just to make sure that the file is there let's see which files are in this directory<br>
```{r class.source="bg-danger", class.output="bg-warning"}
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106")
list.files()
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106")
list.files()
#### Is igsr_samples.tsv in your output? Great! <br>
#### Let's import that dataset to R
#### And check the first few lines with the function head()<br>
```{r import}
#### Let's import that dataset to R
#### And check the first few lines with the function head()<br>
```{r import}
KG_Samples = read.table("igsr_samples.tsv",sep = "\t", header = T)
head(KG_Samples)
KG_Samples = read.table("igsr_samples.tsv",sep = "\t", header = T)
head(KG_Samples)
library(tidyverse)
head(KG_Samples$Data.collections,2)
KG_Samples = KG_Samples %>%
separate(Data.collections,c("A","B","C","D","E"),",")
nrow(KG_Samples) ##2513
table(KG_Samples$Sex)
KG_Samples %>% group_by(Sex) %>% tally()
table(KG_Samples$Population.code,KG_Samples$Sex)
KG_Samples %>% filter(Population.code =="GBR") %>% group_by(Sex) %>% tally()
sample(c(0:100),1)
KG_Samples$Age = sample(c(0:100),size = nrow(KG_Samples), replace = TRUE)
head(KG_Samples,2)
KG_Samples = KG_Samples[,c(1,2,14,3:8)]
head(KG_Samples,2)
colnames(KG_Samples)
KG_Samples = subset(KG_Samples, select=-c(Biosample.ID))
colnames(KG_Samples)
summary_Age <- KG_Samples %>%
summarize(mean = mean(Age), std_dev = sd(Age))
summary_Age
summary_sex_Age <- KG_Samples %>%
group_by(Sex) %>%
summarize(mean = mean(Age, na.rm = TRUE),
std_dev = sd(Age, na.rm = TRUE))
summary_sex_Age
KG_Samples %>%
group_by(Population.name) %>%
summarize(count = n()) %>%
arrange(desc(count))
KG_Samples <- KG_Samples %>%
mutate(Age_Months = Age * 52)
KG_Samples <- KG_Samples %>%
mutate(Age_Months = Age * 52)
ggplot(data = KG_Samples, mapping = aes(x = Age)) +
geom_histogram(color = "white", bins = 25)+
theme_classic()
---
title: "Probability Distributions in R"
## 1. Introduction
This document explores the use of R's probability distribution functions. R provides a comprehensive suite of functions to calculate probabilities, quantiles, random samples, and cumulative probabilities for both discrete and continuous distributions.
---
## Probability Distributions
R provides a series of functions to calculate properties of the distributions from a large number of discrete and continuous distributions.
```{r}
##n = number of trials
n <- 8
##p = probability of success
p <- 0.15
?dbinom
barplot(dbinom(0:n, n, p), names.arg = 0:n)
##CDF
plot(pbinom(0:20,n,p),type = "b")
?dbinom
barplot(dbinom(0:20, n, p), names.arg = 0:n)
barplot(dbinom(0:n, n, p), names.arg = 0:n)
###
dbinom(5)
###
dbinom(5,100, .10)
##CDF
plot(pbinom(0:20,n,p),type = "b")
##n = number of trials
n <- 100
##CDF
plot(pbinom(0:20,n,p),type = "b")
qnorm(0.95, mean = 0, sd = 1)
# Parameters
n <- 100  # Total trees
p <- 0.1  # Probability of infection
k <- 5    # Threshold
# Probability of more than 5 infections
prob_more_than_5 <- 1 - pbinom(k, n, p)
prob_more_than_5
k <- 95    # Threshold
# Probability of more than 5 infections
prob_more_than_5 <- 1 - pbinom(k, n, p)
prob_more_than_5
k <- 80    # Threshold
# Probability of more than 5 infections
prob_more_than_5 <- 1 - pbinom(k, n, p)
prob_more_than_5
k <- 5    # Threshold
# Probability of more than 5 infections
prob_more_than_5 <- 1 - pbinom(k, n, p)
prob_more_than_5
# Probability of more than 5 infections
prob_more_than_5 <- 1 - pbinom(k, n, p)
prob_more_than_5
#### Visualization:
```{r}
# Plot CDF with threshold
plot(pbinom(0:100, n, p), type = "l", main = "Cumulative Probability (Tree Infections)", col = "blue")
abline(v = k, col = "red", lty = 2)
# Plot CDF with threshold
plot(pbinom(0:100, n, p), type = "l", main = "Cumulative Probability (Tree Infections)", col = "blue")
# Plot CDF with threshold
plot(pbinom(0:100, n, p), type = "l", main = "Cumulative Probability (Tree Infections)", col = "blue")
# Parameters
n <- 110  # Total tickets sold
p <- 0.88  # Probability of showing up
k <- 100  # Maximum seats available
# Probability of overbooking
prob_overbooking <- 1 - pbinom(k, n, p)
prob_overbooking
# Plot probabilities
plot(pbinom(0:200, n, p), type = "l", main = "Overbooking Probability", col = "purple")
# Parameter
# Average number of crossovers per cell
lambda <- (50*0 + 25*1 + 20*2 + 5*3) / 100
lambda
# Probability of no crossovers
prob_no_crossover <- dpois(0, lambda)
prob_no_crossover
# Probability of at least one crossover
prob_at_least_one <- 1 - ppois(0, lambda)
prob_at_least_one
# Plot Poisson distribution
plot(dpois(0:10, lambda), type = "h", main = "Poisson Distribution (Crossovers)", col = "orange", lwd = 2)
prob_no_crossover
# Parameter
# Average number of crossovers per cell
lambda <- (50*0 + 25*1 + 20*2 + 5*3) / 100
lambda
dpoos(2, lambda)
dpois(2, lambda)
?dpois()
?ppois()
# Probability of at least one crossover
prob_at_least_one <- 1 - dpois(0, lambda)
prob_at_least_one
# Probability of at least one crossover
prob_at_least_one <- 1 - ppois(0, lambda)
prob_at_least_one
# Lambda (average number of cups sold)
lambda <- 10
# Probability of making a positive profit
prob_positive_profit <- 1 - ppois(8, lambda)
print(paste("The probability of making a positive profit is", round(prob_positive_profit, 4)))
# Simulate one day's profit in cents
profit <- rpois(1, lambda) * 25 - 200
print(paste("Simulated profit for one day is", profit, "cents"))
# Simulate the probability of making a profit
reps <- 1000 # Number of simulations
# Probability of making a positive profit
prob_positive_profit <- 1 - ppois(8, lambda)
print(paste("The probability of making a positive profit is", round(prob_positive_profit, 4)))
# Simulate one day's profit in cents
profit <- rpois(1, lambda) * 25 - 200
print(paste("Simulated profit for one day is", profit, "cents"))
# Simulate the probability of making a profit
reps <- 1000 # Number of simulations
simlist <- rpois(reps, lambda) * 25 - 200
prob_simulated_profit <- sum(simlist > 0) / reps
print(paste("Simulated probability of making a profit is", round(prob_simulated_profit, 4)))
# Probability of success (getting a hit)
p <- 0.3
# Probability of not getting a hit after seven times at bat
prob_no_hit_after_7 <- dgeom(7, p)
print(paste("The probability of not getting a hit after seven times at bat is", round(prob_no_hit_after_7, 4)))
# Plot the CDF
plot(1 - pgeom(0:20, p), type = "l", main = "Geometric Distribution CDF", xlab = "Number of At Bats", ylab = "Cumulative Probability")
# Number of successes in population
m <- 100
# Number of failures in population
n <- 900
# Sample size
k <- 50
# Probability of having six independents in the sample
prob_six_independents <- dhyper(6, m, n, k)
print(paste("The probability of having six independents in the sample is", round(prob_six_independents, 4)))
# Probability of having more than three independents in the sample
prob_more_than_three <- 1 - phyper(2, m, n, k)
print(paste("The probability of having more than three independents in the sample is", round(prob_more_than_three, 4)))
# Probability of having more than three independents in the sample
prob_more_than_three <- 1 - phyper(2, m, n, k)
print(paste("The probability of having more than three independents in the sample is", round(prob_more_than_three, 4)))
# Parameter
rate <- 1 / 4.5
# Probability of no call in 5 minutes
prob_no_call <- 1 - pexp(5, rate)
prob_no_call
# Parameters
mu <- 120  # Mean
sigma <- 20  # Standard deviation
# Probability that a random baby’s birth weight will be greater than 140 ounces
prob_gt_140 <- 1 - pnorm(140, mu, sigma)
print(paste("The probability that a random baby’s birth weight will be greater than 140 ounces is", round(prob_gt_140, 4)))
```{r}
#  X ~ N(77, 134.56)
?pnorm
# Calculation for DBP < 60
prob_less_60 <- pnorm(60, 77, 11.6)
prob_less_60
# Calculation for DBP > 90
prob_greater_90 <- 1 - pnorm(90, 77, 11.6)
prob_greater_90
(1-pnorm(60,77,11.6))-(1-pnorm(90,77,11.6))
.869-.071
prob_between_60_90 <- pnorm(90, 77, 11.6) - pnorm(60, 77, 11.6)
prob_between_60_90
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/carterhardy/spring 2025 UU/Prob-and-Stats-BMI6106")
list.files()
KG_Samples = read.table("igsr_samples.tsv",sep = "\t", header = T)
library(tidyverse)
head(KG_Samples$Data.collections,2)
KG_Samples = KG_Samples %>%
separate(Data.collections,c("A","B","C","D","E"),",")
library(tidyverse)
head(KG_Samples$Data.collections,2)
KG_Samples = KG_Samples %>%
separate(Data.collections,c("A","B","C","D","E"),",")
#### how many samples are there in total<br>
```{r nrow}
nrow(KG_Samples) ##2513
